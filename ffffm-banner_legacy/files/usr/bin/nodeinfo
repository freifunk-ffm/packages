#!/bin/sh

# ibss oder mesh
MESH_DEVICE=mesh

NODEINFO="$(mktemp -p /tmp)"
gluon-neighbour-info -d ::1 -p 1001 -c 1 -r nodeinfo > $NODEINFO
STATISTICS="$(mktemp -p /tmp)"
gluon-neighbour-info -d ::1 -p 1001 -c 1 -r statistics > $STATISTICS

echo
echo "### Batman Gateway:"
batctl gwl
echo "### Batman Mode: " $(batctl gw)

echo
echo -n "### Node ID: "
jsonfilter -i $NODEINFO -e '@.node_id'
echo -n "### Node MAC: "
jsonfilter -i $NODEINFO -e '@.network.mac'
echo -n "### Node IP v6: "
jsonfilter -i $NODEINFO -e '@.network.addresses.*'

echo
echo "### (Next)Node IPv4: $(uci -q get network.local_node.ipaddr || echo '-')"

echo
echo -n "### Hardware: "
cat /tmp/sysinfo/model
echo -n "### Hardware ID: "
# Bei TP-Link Geraeten kann eine HWID ausgelesen werden
echo $([ -f /lib/ar71xx.sh ]&&[ $(head -c 4 /tmp/sysinfo/model) = 'TP-L' ]&&(. /lib/ar71xx.sh ;. /lib/functions.sh ; echo $(tplink_get_hwid))||(echo '-'))
echo -n "### Firmware: "
cat /lib/gluon/release
echo -n "### Gluon: "
cat /lib/gluon/gluon-version
echo "### Site Code: $(jsonfilter -i $NODEINFO -e '@.system.site_code')"
echo "### Domain Code: $(jsonfilter -i $NODEINFO -e '@.system.domain_code')"
echo "### Autoupdate enabled: $(uci -q get autoupdater.settings.enabled)"
echo "### Autoupdate Branch: $(uci -q get autoupdater.settings.branch)"

echo
echo "### Contact Information: $(uci -q get gluon-node-info.@owner[0].contact || echo '-')"

echo
echo "### Location:"
echo " Enabled: $(uci -q get gluon-node-info.@location[0].share_location || echo '0')"
echo " Latitude: $(uci -q get  gluon-node-info.@location[0].latitude || echo '-')"
echo " Longitude: $(uci -q get gluon-node-info.@location[0].longitude || echo '-')"

echo
echo "### Mesh-VPN:"
echo " Fastd enabled: $(uci -q get fastd.mesh_vpn.enabled || echo '-')"
echo " MTU: $(uci -q get fastd.mesh_vpn.mtu)"

echo
echo "### Mesh:"
echo -n " Mesh on LAN enabled: "; if [ $(uci -q get network.mesh_lan.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
echo -n " Mesh on WAN enabled: "; if [ $(uci -q get network.mesh_wan.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi

for i in 0 1; do
uci -q get "wireless.$MESH_DEVICE""_radio$i.disabled" > /dev/null
if [ $? = '0' ]; then
echo -n " Mesh on Radio$i enabled: "; if [ $(uci -q get "wireless.$MESH_DEVICE""_radio$i.disabled" || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
fi
done

echo -n " Hop Penalty: "; if [ -f /sys/class/net/bat0/mesh/hop_penalty ] ; then cat /sys/class/net/bat0/mesh/hop_penalty ; else echo '-'; fi

echo
echo "### Wifi:"
echo -n " DFS-Outdoor Mode: "
if [ ! $(uci -q get gluon.wireless.outdoor) ] ; then echo '-'; else uci -q get gluon.wireless.outdoor; fi
echo -n " Radio0 enabled: "
if [ $(uci -q get wireless.radio0.disabled || echo 1) = '0' ]; then echo '1'; elif [ $(uci -q get wireless.client_radio0.disabled) ]; then echo '1'; else echo '-'; fi
echo -n " Radio0 channel: "
uci -q get wireless.radio0.channel || echo '-'
echo -n " Radio0 clients enabled: "
if [ ! $(uci -q get wireless.client_radio0.disabled) ] ; then echo '-'; elif [ $(uci -q get wireless.client_radio0.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
echo -n " Radio1 enabled: "
if [ $(uci -q get wireless.radio1.disabled || echo 1) = '0' ]; then echo '1'; elif [ $(uci -q get wireless.client_radio1.disabled) ]; then echo '1'; else echo '-'; fi
echo -n " Radio1 channel: "
uci -q get wireless.radio1.channel || echo '-'
echo -n " Radio1 clients enabled: "
if [ ! $(uci -q get wireless.client_radio1.disabled) ] ; then echo '-'; elif [ $(uci -q get wireless.client_radio1.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
echo -n " Connected clients 2.4 GHz: "
jsonfilter -i $STATISTICS -e '$.clients.wifi24'
echo -n " Connected clients 5 GHz: "
jsonfilter -i $STATISTICS -e '$.clients.wifi5'

echo
echo -n "### Uptime:"
uptime

echo
echo "### SSH connection from/to : "$SSH_CONNECTION

echo

#Aufraeumen
rm $NODEINFO
rm $STATISTICS
